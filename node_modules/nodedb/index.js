'use strict';
var md5 = require('./libs/md5');

var fs = require('fs');

var uriManager = require('./libs/uriManager');

var nodedb = {};

nodedb.version = '0.0.1';


nodedb.savePath = null;

/**
 * 
 * @param config 至少包含path属性指定数据存放位置
 * @returns {{}}
 */
nodedb.init = function (config) {

    nodedb.savePath = fs.realpathSync(config.path ? config.path : '.');
    fs.exists(nodedb.savePath + '/_indexs', function (e, r) {
        if (!e)fs.mkdirSync(nodedb.savePath + '/_indexs');
    });
    fs.exists(nodedb.savePath + '/_range', function (e, r) {
        if (!e)fs.mkdirSync(nodedb.savePath + '/_range');
    });
    return nodedb;
};
/**
 *
 * @param uri 详细的路径 /uid/a/b/c
 * @param cb
 */
nodedb.get = function (uri, cb) {
    var path = nodedb.route(uri);
    if(path.length) {
        var user_hash = nodedb._userHash(path.shift());
        fs.readFile(nodedb.savePath + '/' + user_hash, function (e, r) {
            if (e) {
                cb(404, null);
            } else {
                var result = {};
                try {
                    var tree = JSON.parse(r.toString());
                    result = tree;
                    while (path.length) {
                        result = result[path.shift()];
                    }
                } catch (ex) {
                    result = null;
                }
                if(result==undefined || result==null){
                    cb(404,null);
                }else {
                    cb(null, result);
                }
            }
        });
    }else{
        cb(403,null);
    }
};

/**
 *
 * @param string
 * @param cb
 */
nodedb.match = function (path, string, cb) {
    var v_hash = md5(path + string);
    if (fs.existsSync(nodedb.savePath + '/_indexs/' + v_hash)) {
        fs.readdir(nodedb.savePath + '/_indexs/' + v_hash, function (e, r) {
            if (e) {
                cb(e, r);
            } else {
                if (r.length) {
                    var result = [];
                    for (var i = 0; i < r.length; i++) {
                        if (fs.existsSync(nodedb.savePath + '/' + r[i])) {
                            let _uid = r[i].split('_')[1];
                            let _data = JSON.parse(fs.readFileSync(nodedb.savePath + '/' + r[i]).toString());
                            let uri = nodedb._parse(path);
                            let _tmp = _data;
                            for(let k in uri){
                                _tmp = _tmp[uri[k]];
                            }
                            if(_tmp != string){
                                fs.unlink(nodedb.savePath + '/_indexs/' + v_hash + '/' + r[i], function (_e, _r) {
                                });
                            }else{
                                result.push({
                                    'uid': _uid,
                                    'data': _data
                                });
                            }
                        } else {
                            fs.unlink(nodedb.savePath + '/_indexs/' + v_hash + '/' + r[i], function (_e, _r) {
                            });
                        }
                    }
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    } else {
        cb(null, []);
    }
};

nodedb.query = nodedb.match;

nodedb.range = function (path, range, cb) {
    let pathHash = md5(path);
    if (fs.existsSync(nodedb.savePath + '/_range/' + pathHash)) {
        var values = fs.readdirSync(nodedb.savePath + '/_range/' + pathHash);
        if(values.length){
            let result = [];
            let op = undefined;
            if(range[0]!==null && range[1]!==null ){
                if(range[0]<=range[1]){
                    op = 'both';
                }else{
                    op = 'neither';
                }
            }else{
                if(range[0]!==null){
                    op = 'left';
                }else{
                    op = 'right';
                }
            }
            switch(op){
                case 'left':
                    for(let k in values){
                        if(values[k]<range[0])continue;
                        let docs = fs.readdirSync(nodedb.savePath + '/_range/' + pathHash+'/'+values[k]);
                        for(let doc in docs){
                            result.push(JSON.parse(fs.readFileSync(nodedb.savePath + '/'+docs[doc]).toString()));
                        }
                    }
                    break;
                case 'right':
                    for(let k in values){
                        if(values[k]>range[1])continue;
                        let docs = fs.readdirSync(nodedb.savePath + '/_range/' + pathHash+'/'+values[k]);
                        for(let doc in docs){
                            result.push(JSON.parse(fs.readFileSync(nodedb.savePath + '/'+docs[doc]).toString()));
                        }
                    }
                    break;
                case 'both':
                    for(let k in values){
                        if(values[k]<range[0] || values[k]>range[1])continue;
                        let docs = fs.readdirSync(nodedb.savePath + '/_range/' + pathHash+'/'+values[k]);
                        for(let doc in docs){
                            result.push(JSON.parse(fs.readFileSync(nodedb.savePath + '/'+docs[doc]).toString()));
                        }
                    }
                    break;
                case 'neither':
                    for(let k in values){
                        if(values[k]>range[1] && values[k]<range[0])continue;
                        let docs = fs.readdirSync(nodedb.savePath + '/_range/' + pathHash+'/'+values[k]);
                        for(let doc in docs){
                            result.push(JSON.parse(fs.readFileSync(nodedb.savePath + '/'+docs[doc]).toString()));
                        }
                    }
                    break;
            }
            cb(null,result);
        }else{
            cb(null,[]);
        }
    }else{
        cb(null,[]);
    }
}

/**
 *
 * @param uri
 * @param data
 * @param option 定义需要索引的键
 * @param cb
 */
nodedb.put = function (uri, data, indexs, cb) {
    if (typeof indexs == 'function') {
        cb = indexs;
    }
    var path = nodedb.route(uri);
    var uid = path.shift();
    var user_hash = nodedb._userHash(uid);
    fs.readFile(nodedb.savePath + '/' + user_hash, function (e, r) {
        var tree = {};
        if (r) {
            try {
                tree = JSON.parse(r);
            } catch (ex) {
                console.log(ex);
            }
        }

        let tmpTree = tree;
        let parentTree = undefined;
        let parentNode = undefined;
        let curNode = undefined;
        let _len = path.length;

        // 当这个文档本来不存在活着损坏
        if(Object.keys(tree).length == 0){
            while(path.length){
                curNode = path.shift();
                tmpTree[curNode] = {};
                parentTree = tmpTree;
                tmpTree = tmpTree[curNode];
            }
            if(typeof data == 'object') {
                for (let k in data) {
                    tmpTree[k] = data[k];
                }
            }else{
                parentTree[curNode] = data;
            }
        }else {
            do{
                curNode = path.shift();
                if(curNode){
                    if (tmpTree[curNode] == undefined) {
                        if(typeof tmpTree != 'object'){
                            tmpTree = parentTree[parentNode] = {};
                            parentTree[parentNode][curNode] = {};
                        }else {
                            tmpTree[curNode] = {};
                        }
                    }
                    parentNode = curNode;
                    parentTree = tmpTree;
                    tmpTree = tmpTree[curNode];
                }else{
                    //找寻到要操作的节点
                    if(typeof data == 'object') {
                        for (let k in data) {
                            tmpTree[k] = data[k];
                        }
                    }else{
                        parentTree[parentNode] = data;
                    }
                }
                _len = _len -1;
            }while(_len>-1);
        }
        fs.writeFile(nodedb.savePath + '/' + user_hash, JSON.stringify(tree), function (e1, r1) {
            cb(e1, r1);
            // index
            //当传入的data是一个对象
            if(typeof data == 'object') {
                if (typeof indexs == 'object' && indexs.length) {
                    var path_i = uri.replace('/' + uid, '');
                    for (var k in indexs) {
                        // 索引键对应的值必须存在 且 不是对象类型
                        if (data[indexs[k]] != undefined && typeof data[indexs[k]] != 'object') {
                            var v_hash = md5(path_i+'/'+indexs[k] + data[indexs[k]]);
                            if (!fs.existsSync(nodedb.savePath + '/_indexs/' + v_hash)) {
                                fs.mkdirSync(nodedb.savePath + '/_indexs/' + v_hash);
                            }
                            if (!fs.existsSync(nodedb.savePath + '/_indexs/' + v_hash + '/' + user_hash)) {
                                fs.writeFileSync(nodedb.savePath + '/_indexs/' + v_hash + '/' + user_hash,path_i+'/'+indexs[k] + data[indexs[k]]);
                            }
                            //处理数字 索引
                            if(Number.parseInt(data[indexs[k]]*1)){
                                var pathHash = md5(path_i+'/'+indexs[k]);
                                if (!fs.existsSync(nodedb.savePath + '/_range/' + pathHash)) {
                                    fs.mkdirSync(nodedb.savePath + '/_range/' + pathHash);
                                }
                                if (!fs.existsSync(nodedb.savePath + '/_range/' + pathHash+'/'+data[indexs[k]])) {
                                    fs.mkdirSync(nodedb.savePath + '/_range/' + pathHash+'/'+data[indexs[k]]);
                                }
                                if (!fs.existsSync(nodedb.savePath + '/_range/' + pathHash+'/'+data[indexs[k]]+'/'+user_hash)) {
                                    fs.writeFileSync(nodedb.savePath + '/_range/' + pathHash+'/'+data[indexs[k]]+'/'+user_hash,path_i+data[indexs[k]]);
                                }
                            }
                        }
                    }
                }
            }else{
            // 当传入的data是一个 值
                if(indexs == true){
                    var path_i = uri.replace('/' + uid, '');
                    var v_hash = md5(path_i + data);
                    if (!fs.existsSync(nodedb.savePath + '/_indexs/' + v_hash)) {
                        fs.mkdirSync(nodedb.savePath + '/_indexs/' + v_hash);
                    }
                    if (!fs.existsSync(nodedb.savePath + '/_indexs/' + v_hash + '/' + user_hash)) {
                        fs.writeFileSync(nodedb.savePath + '/_indexs/' + v_hash + '/' + user_hash, path_i + data);
                    }
                    //处理数字 索引
                    if(Number.parseInt(data*1)){
                        var pathHash = md5(path_i);
                        if (!fs.existsSync(nodedb.savePath + '/_range/' + pathHash)) {
                            fs.mkdirSync(nodedb.savePath + '/_range/' + pathHash);
                        }
                        if (!fs.existsSync(nodedb.savePath + '/_range/' + pathHash+'/'+data)) {
                            fs.mkdirSync(nodedb.savePath + '/_range/' + pathHash+'/'+data);
                        }
                        if (!fs.existsSync(nodedb.savePath + '/_range/' + pathHash+'/'+data+'/'+user_hash)) {
                            fs.writeFileSync(nodedb.savePath + '/_range/' + pathHash+'/'+data+'/'+user_hash,path_i+data);
                        }
                    }
                }
            }
        });
    });
};

nodedb.route = function (uri) {
    var nodes = nodedb._parse(uri);
    return nodes;
}

nodedb._parse = function (str) {
    return uriManager.object(str);
};

nodedb._read = function (user) {

};

nodedb._userHash = function (user) {
    return user;
    //return md5(user) + '_' + user;
};
/**
 * 将所有索引对象读出来，可以放在内存里，不过用户多了以后不推荐啊，窝真是傻，这样的function都写出来了
 */
nodedb.cache = function () {
    var indexs = nodedb.savePath + '/_indexs';
    return (function _cur_read(path) {
        var result = {};
        var child = fs.readdirSync(path);
        for (var k in child) {
            result[child[k]] = {};
            if (fs.statSync(path + '/' + child[k]).isDirectory()) {
                result[child[k]] = _cur_read(path + '/' + child[k]);
            }
        }
        return result;
    })(indexs);
};

module.exports = nodedb.init;

/**
 * Change Log
 * 1     init
 */

